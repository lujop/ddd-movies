plugins {
    id "java"
    id "org.sonarqube" version "2.8"
    id "com.diffplug.gradle.spotless" version "3.28.1" apply false
    id 'org.checkerframework' version '0.5.0' apply false
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    group 'cat.joanpujol'
    version '1.0.0-SNAPSHOT'

    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'java'
    apply plugin: 'org.checkerframework'
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
        options.annotationProcessorPath = configurations.annotationProcessor
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    dependencies {
        testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.15.1'

        checkerFramework 'org.checkerframework:checker:3.3.0'
        implementation 'org.checkerframework:checker-qual:3.3.0'
    }

    spotless {
        java {
            googleJavaFormat('1.7')
            removeUnusedImports()
        }
    }

    checkerFramework {
        checkers = [
                'org.checkerframework.checker.nullness.NullnessChecker',
                'org.checkerframework.checker.units.UnitsChecker'
        ]
        extraJavacArgs = [
                '-Werror',
                '-AsuppressWarnings=uninitialized',
                '-AskipDefs=Test$' //Dont check tests
        ]
    }

    tasks.withType(JavaCompile) {
        doFirst {
            println "Args for for $name are $options.allCompilerArgs"
        }
        logging.setLevel(LogLevel.DEBUG)
    }
}

//Aggregate report for all projects (needed by Sonarcloud)
task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.check
}

sonarqube {
    properties {
        property "sonar.projectKey", "lujop_ddd-movies"
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}